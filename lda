import numpy as np

x = [
    [2.95, 6.63, 1],
    [2.53, 7.79, 1],
    [3.57, 5.65, 1],
    [3.16, 5.47, 1],
    [2.58, 4.46, 2],
    [2.16, 6.22, 2],
    [3.27, 3.52, 2]
]

x1 = []
x2 = []
for i in range(len(x)):
    if x[i][2] == 1:
        x1.append(x[i][0:2])
    if x[i][2] == 2:
        x2.append(x[i][0:2])

print ("Data:")
for i in range(len(x)):
    print(*x[i], sep = "  ")

#Langkah 1
print ("\nLangkah 1:")

mx = [[0 for x in range(len(x1[0]))] for y in range(3)]
for i in range(len(x1[0])):
    mx[1][i] = sum([row[i] for row in x1]) / len(x1)
    mx[2][i] = sum([row[i] for row in x2]) / len(x2)
    mx[0][i] = sum([row[i] for row in (x1+x2)]) / len(x)

print("μ =",np.round(mx[0],3))
print("μ1 =",np.round(mx[1],3))
print("μ2 =",np.round(mx[2],3))

#Langkah 2
print ("\nLangkah 2:")

cx1 = [[0 for x in range(len(x1[0]))] for y in range(len(x1))]
for i in range(len(x1[0])):
    for j in range(len(x1)):
        cx1[j][i] = x1[j][i] - mx[0][i]
print ("(xi - μ) Kelompok 1 =")
for i in range(len(cx1)):
    print("[",*np.round(cx1[i],3),"]", sep = " ")

cx2 = [[0 for x in range(len(x2[0]))] for y in range(len(x2))]
for i in range(len(x2[0])):
    for j in range(len(x2)):
        cx2[j][i] = x2[j][i] - mx[0][i]
print ("\n(xi - μ) Kelompok 2 =")
for i in range(len(cx2)):
    print("[",*np.round(cx2[i],3),"]", sep = " ")

cmk1 = [[0 for x in range(4)] for y in range(len(x1))]
for i in range(len(x1)):
    cmk1[i][0] = cx1[i][0] * cx1[i][0]
    cmk1[i][1] = cx1[i][0] * cx1[i][1]
    cmk1[i][2] = cx1[i][1] * cx1[i][0]
    cmk1[i][3] = cx1[i][1] * cx1[i][1]
sumcmk1 = [[0 for x in range(len(cmk1[0]))] for y in range(2)]
for i in range(len(cmk1[0])):
    sumcmk1[0][i] = sum([row[i] for row in cmk1])
    sumcmk1[1][i] = sumcmk1[0][i] / len(cmk1)

print("\nCovariance Matriks Kelompok 1 =")
for i in range(len(cmk1)):
    print("[",*np.round(cmk1[i],3),"]", sep = " ")
print("SUM =",np.round(sumcmk1[0],3))
print("SUM / Jumlah Data =",np.round(sumcmk1[1],3))

cmk2 = [[0 for x in range(4)] for y in range(len(x2))]
for i in range(len(x2)):
    cmk2[i][0] = cx2[i][0] * cx2[i][0]
    cmk2[i][1] = cx2[i][0] * cx2[i][1]
    cmk2[i][2] = cx2[i][1] * cx2[i][0]
    cmk2[i][3] = cx2[i][1] * cx2[i][1]
sumcmk2 = [[0 for x in range(len(cmk2[0]))] for y in range(2)]
for i in range(len(cmk2[0])):
    sumcmk2[0][i] = sum([row[i] for row in cmk2])
    sumcmk2[1][i] = sumcmk2[0][i] / len(cmk2)

print("\nCovariance Matriks Kelompok 2 =")
for i in range(len(cmk2)):
    print("[",*np.round(cmk2[i],4),"]", sep = " ")
print("SUM =",np.round(sumcmk2[0],4))
print("SUM / Jumlah Data =",np.round(sumcmk2[1],4))

c1 = [
    [sumcmk1[1][0], sumcmk1[1][1]],
    [sumcmk1[1][2], sumcmk1[1][3]]
]
c2 = [
    [sumcmk2[1][0], sumcmk2[1][1]],
    [sumcmk2[1][2], sumcmk2[1][3]]
]

print ("\nc1 =")
for i in range(len(c1)):
    print("[",*np.round(c1[i],3),"]", sep = " ")
print ("\nc2 =")
for i in range(len(c2)):
    print("[",*np.round(c2[i],4),"]", sep = " ")

#Langkah 3
print ("\nLangkah 3:")

c = [[0 for x in range(len(c1[0]))] for y in range(len(c1))]
for i in range(len(c1[0])):
    for j in range(len(c1)):
        c[j][i] = 4/7 * c1[j][i] + 3/7 * c2[j][i]

print ("C =")
for i in range(len(c)):
    print("[",*np.round(c[i],4),"]", sep = " ")

#Langkah 4
print ("\nLangkah 4:")

d = c[0][0] * c[1][1] - c[0][1] * c[1][0]

inversC = [
    [c[1][1]/d, -c[0][1]/d],
    [-c[1][0]/d, c[0][0]/d]
]

print ("Invers C =")
for i in range(len(inversC)):
    print("[",*np.round(inversC[i],4),"]", sep = " ")

#Langkah 5
print ("\nLangkah 5:")

mC = []
mCx = [[0 for x in range(2)] for y in range(len(x))]
mCm = [[0 for x in range(1)] for y in range(2)]
for i in range(2):
    row = []
    for j in range(len(inversC[0])):
        total = 0
        for k in range(2):
            total = total + (mx[i+1][k] * inversC[k][j])
        row.append(total)
    mC.append(row)
    for j in range(len(x)):
        mCx[j][i] = mC[i][0]*x[j][0] + mC[i][1]*x[j][1]
    for j in range(1):
        mCm[i][0] = mC[i][0]*mx[i+1][0] + mC[i][1]*mx[i+1][1]

p1 = len(x1) / len(x)
p2 = len(x2) / len(x)

hasil = [[0 for x in range(4)] for y in range(len(x))]

for i in range(len(x)):
    hasil[i][0] = round(mCx[i][0] - mCm[0][0]/2 + np.log(p1),4)
    hasil[i][1] = round(mCx[i][1] - mCm[1][0]/2 + np.log(p2),4)
    hasil[i][3] = x[i][2]
    if hasil[i][0]>hasil[i][1]:
        hasil[i][2] = 1
    elif hasil[i][0]<hasil[i][1]:
        hasil[i][2] = 2

print ("   f1       f2   Output Target")
for i in range(len(x)):
    print (*hasil[i], sep = "   ")